import unittest
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad

class TestDerypt(unittest.TestCase):
    TEST_DATA = [
        {
            "payload": b'\x18\xa7\xdc\x14\xf46\xf1/C\xd6\xea*\xd9\x7fR8J,3,\xb5D\x06Xe\x8b=\xfd\xe1!\xef\r',
            "source": b'\x00\x00\x00\x03\xf4\xcbs\xeb.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\xa2\x00\x00\x03M\xf3\x04\x01\x00\x03\x00i\x02\xe7\x85L\x01i\xf4\xcbs\xdb\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\xa3\xf3\x84\x18\xa7\xdc\x14\xf46\xf1/C\xd6\xea*\xd9\x7fR8J,3,\xb5D\x06Xe\x8b=\xfd\xe1!\xef\r\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xa3\x00\x00\x03N\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b'\xe7p\xef@\x1c\xffq\x1d\xfe\xf1=\xdcA\x02\xed<\x10GyOHW\x90F\x8e\xf0\\\xcfJ\xdaT\xef',
            "source": b"\x00\x00\x00\x03\xf4\xcbL\xdb.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\xa0\x00\x00\x03&\xf3\x04\x01\x00\x03\x00i\x02\xe7^:\x01i\xf4\xcbL\xcb\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\xa1\xf3\x84\xe7p\xef@\x1c\xffq\x1d\xfe\xf1=\xdcA\x02\xed<\x10GyOHW\x90F\x8e\xf0\\\xcfJ\xdaT\xef\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\xa1\x00\x00\x03'\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10"
        },
        {
            "payload": b'Z\xe8Y\x02{\x14\xc2u\xcc\x92\xe0S\x82i^9cC\x99c\x8aWyf\xf8\x0e\x1f\xc8\x0f\xb4\xf2$',
            "source": b'\x00\x00\x00\x03\xf4\xcb%\xcb.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x9e\x00\x00\x03\t\xf3\x04\x01\x00\x03\x00i\x02\xe77%\x01i\xf4\xcb%\xac\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x9f\xf3\x84Z\xe8Y\x02{\x14\xc2u\xcc\x92\xe0S\x82i^9cC\x99c\x8aWyf\xf8\x0e\x1f\xc8\x0f\xb4\xf2$\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x9f\x00\x00\x03\n\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b';\x85cns\x10\x11\x8e\xf9\xfcn\xd2\xfe\x9a\x1b\x0cx\xa73\xed3Hi\x08E\xb5\xa0\x032\xcf\xe7\xda',
            "source": b'\x00\x00\x00\x01\xf4\xca\xff\xf4.\xa9M\xcd\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x9d\xf3\x84;\x85cns\x10\x11\x8e\xf9\xfcn\xd2\xfe\x9a\x1b\x0cx\xa73\xed3Hi\x08E\xb5\xa0\x032\xcf\xe7\xda'
        },
        {
            "payload": b';\x85cns\x10\x11\x8e\xf9\xfcn\xd2\xfe\x9a\x1b\x0cx\xa73\xed3Hi\x08E\xb5\xa0\x032\xcf\xe7\xda',
            "source": b'\x00\x00\x00\x03\xf4\xca\xfe\xbb.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x9c\x00\x00\x02\xd1\xf3\x04\x01\x00\x03\x00i\x02\xe7\x10\x11\x01i\xf4\xca\xfe\x9c\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x9d\xf3\x84;\x85cns\x10\x11\x8e\xf9\xfcn\xd2\xfe\x9a\x1b\x0cx\xa73\xed3Hi\x08E\xb5\xa0\x032\xcf\xe7\xda\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x9d\x00\x00\x02\xd2\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b'-)M<\x1cJ0\xa8\xc7\xe8\xb8\xc1\xe7\xd7&\x80\xc8\xc4\x144\x1a"\x82\x14e7\x14\x96\xb7\x97\xfaJ',
            "source": b'\x00\x00\x00\x01\xf4\xca\xd8v.\xa9M\xcd\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x9c\xf3\x84-)M<\x1cJ0\xa8\xc7\xe8\xb8\xc1\xe7\xd7&\x80\xc8\xc4\x144\x1a"\x82\x14e7\x14\x96\xb7\x97\xfaJ'
        },
        {
            "payload": b'-)M<\x1cJ0\xa8\xc7\xe8\xb8\xc1\xe7\xd7&\x80\xc8\xc4\x144\x1a"\x82\x14e7\x14\x96\xb7\x97\xfaJ',
            "source": b'\x00\x00\x00\x03\xf4\xca\xd7\x9b.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x9b\x00\x00\x02\xb8\xf3\x04\x01\x00\x03\x00i\x02\xe6\xe8\xfe\x01i\xf4\xca\xd7\x8c\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x9c\xf3\x84-)M<\x1cJ0\xa8\xc7\xe8\xb8\xc1\xe7\xd7&\x80\xc8\xc4\x144\x1a"\x82\x14e7\x14\x96\xb7\x97\xfaJ\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x9c\x00\x00\x02\xb9\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b'\x15A\xd6\xc9\xd8D.\xba\xfa\xd3\x81\xc5\xd9\xa9\x05\xd3\t8\xf8qN\xc1v\x89rvX\x8bz;v\xb9',
            "source": b'\x00\x00\x00\x03\xf4\xca\xb0\x9b.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x98\x00\x00\x02\xa8\xf3\x04\x01\x00\x03\x00i\x02\xe6\xc1\xee\x01i\xf4\xca\xb0|\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x99\xf3\x84\x15A\xd6\xc9\xd8D.\xba\xfa\xd3\x81\xc5\xd9\xa9\x05\xd3\t8\xf8qN\xc1v\x89rvX\x8bz;v\xb9\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x99\x00\x00\x02\xa9\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b'\xbd\x95F\xcf\x98\x7f\x91%\xc9\xd9|\x8a\x90a\xa1[\x80\xf4Xy\x97\x82q\xe1Ey\x00N&\x8d\x87\x05',
            "source": b'\x00\x00\x00\x03\xf4\xca\x89\x8b.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x94\x00\x00\x02v\xf3\x04\x01\x00\x03\x00i\x02\xe6\x9a\xde\x01i\xf4\xca\x89l\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x95\xf3\x84\xbd\x95F\xcf\x98\x7f\x91%\xc9\xd9|\x8a\x90a\xa1[\x80\xf4Xy\x97\x82q\xe1Ey\x00N&\x8d\x87\x05\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x95\x00\x00\x02w\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10'
        },
        {
            "payload": b"`\xea\xed\xf7\xc3\xdf'\xd897\xd1\xfdD\xf8\xcd\xd1\xa3\x80\xdd\xc9 \x0e\xd7P\xa9\xe4J\xcc5I\xdfo",
            "source": b"\x00\x00\x00\x03\xf4\xcabk.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x92\x00\x00\x02U\xf3\x04\x01\x00\x03\x00i\x02\xe6s\xcd\x01i\xf4\xcab\\\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x93\xf3\x84`\xea\xed\xf7\xc3\xdf'\xd897\xd1\xfdD\xf8\xcd\xd1\xa3\x80\xdd\xc9 \x0e\xd7P\xa9\xe4J\xcc5I\xdfo\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x93\x00\x00\x02V\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10"
        },
        {
            "payload": b'\x03S\xe3\xc1\xd8\x95\x05E\x9d\x18\x92\x0b#\xe8!d\xdf\xbb(`\x9a?\xcf\x9a9\xe8\xf7a\xc1"\xf5|',
            "source": b'\x00\x00\x00\x05\xf4\xca;k.\xa9M\xcd\x07\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x90\x00\x00\x02\'\xf3\x04\x01\x00\x03\x00i\x02\xe6L\xbd\x01i\xf4\xca;L\xfck\x00\xa0\x06\x00\x01\x00\x00\x00\x00.\x00\x00\x00\x91\xf3\x84\x03S\xe3\xc1\xd8\x95\x05E\x9d\x18\x92\x0b#\xe8!d\xdf\xbb(`\x9a?\xcf\x9a9\xe8\xf7a\xc1"\xf5|\x07\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x91\x00\x00\x02(\xf3\x04\x01\x00\x03\x00b\x01\x01k\xff\xff\xfck\x01\x10\x07\x00\x00\x00\x00\x00\x00C\x00\x00\x00\x91\x00\x00\x02)\xf3\x04\x03\x00\x02\x00l\x00\x00\x00\x00\x00\x00\x01\'\x01x\x00\x00\x00\x1e\x03\xc7biT\x9ai\xdd\x08\xee\xc7*C*\xc2\xa5B\x13\x00\x00@@a\r+C\xed\xcf\xa6B\x07\x00\x00\x00\x00\x00\x00C\x00\x00\x00\x91\x00\x00\x02*\xf3\x04\x03\x00\x02\x00l\x00\x00\x00\x00\x00\x00\x01 \x01x\x00\x00\x00\x1e\x03\xc7biT\x9ai\xdd\x08\x07d\x04C\x9e\xe5\x95B\xd8\x00\x00@@U\x97\x03C6\xf4\x96B'
        },
    ]


    def setUp(self):
        self.key = b'This is a key123This is a key123'  # 32 bytes key for AES-256
        self.nonce = b'\x00' * 32  # 32 bytes of 0 for nonce

    def test_decrypt(self):
        payload = b'\xfa\xf2\)\x06\x82\xa6\xbb\xa4e\x93\xee,/m\xbe\xb6q\x01f\t\xba8\xda:H\x13\x8c\x01\xba7\xee'
        cipher = AES.new(self.key, AES.MODE_EAX, nonce=self.nonce)
        decrypted = unpad(cipher.decrypt(payload), AES.block_size)
        expected_output = b'Expected decrypted output'
        self.assertEqual(decrypted, expected_output)

    def test_decrypt_another_payload(self):
        payload = b'\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10'
        cipher = AES.new(self.key, AES.MODE_EAX, nonce=self.nonce)
        decrypted = unpad(cipher.decrypt(payload), AES.block_size)
        expected_output = b'Another expected output'
        self.assertEqual(decrypted, expected_output)

    def test_decrypt_with_padding(self):
        payload = b'\x8b\xad\xf0\x0d\xde\xad\xbe\xef\x00\x00\x00\x00\x00\x00\x00\x00'
        cipher = AES.new(self.key, AES.MODE_EAX, nonce=self.nonce)
        decrypted = unpad(cipher.decrypt(payload), AES.block_size)
        expected_output = b'Padded output'
        self.assertEqual(decrypted, expected_output)

    def test_decrypt_invalid_padding(self):
        payload = b'\x00' * 16
        cipher = AES.new(self.key, AES.MODE_EAX, nonce=self.nonce)
        with self.assertRaises(ValueError):
            unpad(cipher.decrypt(payload), AES.block_size)

if __name__ == '__main__':
    unittest.main()